[{"content":"import { render, screen } from '@testing-library/react';\nfunction RoleExample() {\n  return (\n    <div>\n      <a href=\"/\">Link</a>\n      <button>Button</button>\n      <footer>Contentinfo</footer>\n      <h1>Header</h1>\n      <header>Header</header>\n      <img alt=\"description\" /> Img\n      <input type=\"checkbox\" /> Checkbox\n      <input type=\"number\" /> Spinbutton\n      <input type=\"radio\" /> Radio\n      <input type=\"text\" /> Textbox\n      <li>Listitem</li>\n      <ul>Listgroup</ul>\n    </div>\n  );\n}\n\nrender(<RoleExample />);","type":"code","id":"pcmez"},{"content":"test('can find elements by role', ()=>{\r\n  render(<RoleExample/>)\r\n\r\n  const roles = [\r\n    'link', 'button', 'contentinfo', 'heading', 'banner', 'img', 'checkbox', 'spinbutton', 'radio', 'textbox', 'listitem', 'list'\r\n  ]\r\n\r\n  for(let role of roles) {\r\n    const el = screen.getByRole(role);\r\n\r\n    expect(el).toBeInTheDocument();\r\n  }\r\n})","type":"code","id":"j686s"},{"content":"function AccessibleName() {\r\n  return (\r\n    <div>\r\n    <button>Submit</button>\r\n    <button>Cancel</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nrender(<AccessibleName />)","type":"code","id":"zde7z"},{"content":"test('can sellect by accessible name', ()=>{\r\n  render(<AccessibleName />)\r\n\r\n  const submitButton = screen.getByRole('button', {name: /submit/i})\r\n\r\n  const cancelButton = screen.getByRole('button', {name: /cancel/i})\r\n\r\n  expect(submitButton).toBeInTheDocument()\r\n  expect(cancelButton).toBeInTheDocument()\r\n})","type":"code","id":"o1q00"},{"content":"function MoreNames(){\r\n  return (\r\n    <div>\r\n    <label htmlFor='email-id'>Email</label>\r\n      <input id='email-id' />\r\n\r\n      <label htmlFor='search-id'>Search</label>\r\n      <input id='search-id'/>\r\n    </div>\r\n  )\r\n}\r\nrender(<MoreNames />)","type":"code","id":"5iutr"},{"content":"test('show na email and search input', ()=>{\r\n  render(<MoreNames />)\r\n\r\n  const emailInput = screen.getByRole('textbox', {name: /email/i})\r\n\r\n  const searchInput = screen.getByRole('textbox', {name: /search/i})\r\n\r\n  expect(emailInput).toBeInTheDocument();\r\n  expect(searchInput).toBeInTheDocument();\r\n})","type":"code","id":"o54wo"},{"content":"function IconButtons(){\r\n  return(\r\n    <div>\r\n      <button aria-label='sign in'><svg /></button>\r\n      <button aria-label='sign out'><svg /></button>\r\n    </div>\r\n  )\r\n}\r\n\r\nrender(<IconButtons/>)","type":"code","id":"92hx7"},{"content":"test('find elements based on label',()=>{\r\n  render(<IconButtons/>)\r\n\r\n  const signInButton = screen.getByRole('button', {name: /sign in/i})\r\n  const signOutButton = screen.getByRole('button', {name: /sign out/i})\r\n\r\n  expect(signInButton).toBeInTheDocument();\r\n})","type":"code","id":"y55f3"},{"content":"## Welcome to RTLBook\n\nThis is an interactive coding environment where you can explore the following libraries:\n\n| Name      | Docs |\n| ----------- | ----------- |\n| React      | [docs](https://reactjs.org/)       |\n| @testing-library/react   |  [docs](https://testing-library.com/docs/react-testing-library/intro/)        |\n| @testing-library/user-event |   [docs](https://testing-library.com/docs/user-event/intro)  |\n| @testing-library/react-hooks |  [docs](https://github.com/testing-library/react-hooks-testing-library)  |\n| @testing-library/jest-dom | [docs](https://github.com/testing-library/jest-dom#custom-matchers) |\n| expect |  [docs](https://jestjs.io/docs/expect)  |\n\nIn between each 'cell' there are buttons that can add in a new code editor or a text section.","type":"text","id":"12frm"},{"content":"import React, { useState } from 'react';\nimport { render, screen } from '@testing-library/react';\nimport user from '@testing-library/user-event';\n\nconst Counter = () => {\n  const [count, setCount] = useState(0);\n  return <button onClick={() => setCount((c) => c + 1)}>\n    Count: {count}\n  </button>\n};\nrender(<Counter />);","type":"code","id":"az9bh"},{"content":"test('it shows a button', () => {\n  render(<Counter />);\n\n  const button = screen.getByRole('button');\n\n  expect(\n    button\n  ).toBeInTheDocument();\n});\n","type":"code","id":"ngyzj"},{"content":"test('it doesnt show an input', () => {\n  render(<Counter />);\n\n  const input = screen.queryByRole('textbox');\n  \n  expect(\n    input\n  ).not.toBeInTheDocument();\n});\n","type":"code","id":"hgs1s"}]