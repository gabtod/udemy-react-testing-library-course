[{"content":"# Query  Functions\n\nAll query functions are accessed through the `screen` object in a test.  These query functions *always* begin with one of the following names: `getBy`, `getAllBy`, `queryBy`, `queryAllBy`, `findBy`, `findAllBy`. \n\n| Start of Function Name | Examples                             |\n|------------------------|--------------------------------------|\n| getBy                  | getByRole, getByText                 |\n| getAllBy               | getAllByText, getByDisplayValue      |\n| queryBy                | queryByDisplayValue, queryByTitle    |\n| queryAllBy             | queryAllByTitle, queryAllByText      |\n| findBy                 | findByRole, findBytext               |\n| findAllBy              | findAllByText, findAllByDisplayValue |\n\nThese names indicate the following:\n\n1. Whether the function will return an element or an array of elements\n2. What happens if the function finds 0, 1, or > 1 of the targeted element\n3. Whether the function runs instantly (synchronously) or looks for an element over a span of time (asynchronously)\n\n\n### Looking for a Single Element?\n\n| Name    | 0 matches | 1 match | > 1 match | Notes                                          |\n|---------|-----------|---------|-----------|------------------------------------------------|\n| getBy   | Throw     | Element | Throw     |                                                |\n| queryBy | null      | Element | Throw     |                                                |\n| findBy  | Throw     | Element | Throw     | Looks for an element over the span of 1 second |\n\n\n### Looking for Multiple Elements?\n\n| Name       | 0 matches | 1 match   | > 1 match | Notes                                        |\n|------------|-----------|-----------|-----------|----------------------------------------------|\n| getAllBy   | Throw     | []Element | []Element |                                              |\n| queryAllBy | [ ]       | []Element | []Element |                                              |\n| findAllBy  | Throw     | []Element | []Element | Looks for elements over the span of 1 second |\n\n\n### When to use each\n\n| Goal of test                           | Use                 |\n|----------------------------------------|---------------------|\n| Prove an element exists                | getBy, getAllBy     |\n| Prove an element does **not** exist        | queryBy, queryAllBy |\n| Make sure an element eventually exists | findBy, findAllBy   |","type":"text","id":"aar6f"},{"content":"import { render, screen } from '@testing-library/react';\n\nfunction ColorList() {\n  return (\n    <ul>\n      <li>Red</li>\n      <li>Blue</li>\n      <li>Green</li>\n    </ul>\n  );\n}\n\nrender(<ColorList />);","type":"code","id":"033i7"},{"content":"test('getBy, queryBy, findBy finding 0 elements', async() => {\n  render(<ColorList />);\n\n//throws an error if 0 elements are found\n  expect(\n    () => screen.getByRole('textbox')\n  ).toThrow();\n  \n  //returns null if 0 elements are found\n  expect(screen.queryByRole('textbox')).toEqual(null);\n\n\n  let errorThrow = false;\n  try{\n    //async, every 15ms for 1sec\n    //throws an error after 1s if 0 elements are found\n    await screen.findByRole('textbox');\n  } catch(err) {\n    errorThrow = true;\n  }\n  expect(errorThrow).toEqual(true);\n});","type":"code","id":"sqwd5"},{"content":"test('getBy, queryBy, findBy when they find 1 element', async () => {\n  render(<ColorList />);\n\n  expect(screen.getByRole('list')).toBeInTheDocument();\n\n  expect(screen.queryByRole('list')).toBeInTheDocument()\n\n  expect(await screen.findByRole('list')).toBeInTheDocument()\n});","type":"code","id":"tymoo"},{"content":"test('getBy, queryBy, findBy when finding >1 elements', async () =>{\r\n\r\n  render(<ColorList/>)\r\n\r\n  expect(()=>screen.getByRole('listitem')).toThrow();\r\n\r\n  expect(()=>screen.queryByRole('listitem')).toThrow()\r\n\r\n  let errorThrown = false;\r\n  try{\r\n    await screen.findByRole('listitem')\r\n  }catch(err) {\r\n    errorThrown = true;\r\n  }\r\n\r\n  expect(errorThrown).toEqual(true)\r\n})","type":"code","id":"v3blw"},{"content":"test('getAllBy, queryAllBy, findAllBy', async () =>{\r\n  render(<ColorList />)\r\n\r\n  expect(screen.getAllByRole('listitem')).toHaveLength(3);\r\n\r\n  expect(screen.queryAllByRole('listitem')).toHaveLength(3)\r\n\r\n  expect(await screen.findAllByRole('listitem')).toHaveLength(3)\r\n})","type":"code","id":"iinpd"},{"content":"test('favor using getBy to prove an element exists', ()=>{\r\n  render(<ColorList />)\r\n  const element = screen.getByRole('list')\r\n  expect(element).toBeInTheDocument();\r\n  \r\n})","type":"code","id":"dcpya"},{"content":"test('favor queryBy when proving an element does not exist', ()=>{\r\n  render(<ColorList />)\r\n\r\n  const element = screen.queryByRole('textbox')\r\n\r\n  expect(element).not.toBeInTheDocument();\r\n})","type":"code","id":"u7lqs"},{"content":"import { useState, useEffect } from 'react';\nimport { render, screen } from '@testing-library/react';\n\nfunction fakeFetchColors() {\n  return Promise.resolve(['red', 'blue', 'green']);\n}\n\nfunction LoadableColorList() {\n  const [colors, setColors] = useState([]);\n  useEffect(() => {\n    fakeFetchColors().then((c) => setColors(c));\n  }, []);\n  const renderedColors = colors.map((color) => {\n    return <li key={color}>{color}</li>;\n  });\n\n  return <div>{renderedColors}</div>;\n}\n\nrender(<LoadableColorList />);","type":"code","id":"br8pu"},{"content":"test('favor findBy or findAllBy when data fetching', async () => {\n  render(<LoadableColorList />);\n\n  const els = await screen.findAllByRole('listitem');\n  expect(els).toHaveLength(3);\n});","type":"code","id":"1142r"}]